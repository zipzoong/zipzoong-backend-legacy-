generator client {
  provider = "prisma-client-js"
  output   = "../db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Authentication {
  id               String  @id
  oauth_sub        String
  oauth_type       String
  business_user_id String?
  customer_id      String?

  business_user BusinessUser? @relation(fields: [business_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer      Customer?     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([oauth_sub, oauth_type])
  @@map("authentications")
}

model User {
  id             String  @id
  name           String
  email          String?
  email_verified Boolean
  phone          String?
  phone_verified Boolean
  address_first  String?
  address_second String?
  profile_image  String?

  customer       Customer?
  business_user  BusinessUser?
  board_articles BoardArticle[]
  board_comments BoardComment[]

  @@map("users")
}

model Customer {
  id     String  @id
  birth  String?
  gender String?

  user            User             @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authentications Authentication[]
  rates           BusinessRate[]
  reviews         BusinessReview[]

  @@map("customers")
}

model BusinessUser {
  id                   String  @id
  is_verified          Boolean
  introduction_title   String
  introduction_content String

  user              User             @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authentications   Authentication[]
  real_estate_agent RealEstateAgent?
  home_care_company HomeCareCompany?
  rates             BusinessRate[]
  reviews           BusinessReview[]

  @@map("business_users")
}

model RealEstateAgent {
  id                   String  @id
  is_licensed          Boolean
  real_estate_num      String
  real_estate_name     String
  real_estate_phone    String
  licensed_agent_name  String
  specialized_field_id String

  business          BusinessUser                  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  specialized_field RealEstateSpecializedSubField @relation(fields: [specialized_field_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  properties        RealEstateProperty[]

  @@map("real_estate_agents")
}

model HomeCareCompany {
  id                        String @id
  business_registration_num String
  specialized_field_id      String

  business            BusinessUser                @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  specialized_field   HomeCareSpecializedSubField @relation(fields: [specialized_field_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  introduction_images HomeCareIntroductionImage[]

  @@map("home_care_companies")
}

model HomeCareIntroductionImage {
  id         String @id
  image_url  String
  company_id String

  company HomeCareCompany @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("home_care_introduction_images")
}
model RealEstateProperty {
  id             String @id
  name           String
  main_image_url String
  agent_id       String

  agent RealEstateAgent @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("real_estate_properties")
}
model HomeCareSpecializedSuperField {
  id   String @id
  name String @unique

  sub HomeCareSpecializedSubField[]

  @@map("home_care_specialized_super_fields")
}

model HomeCareSpecializedSubField {
  id       String @id
  name     String @unique
  super_id String

  super               HomeCareSpecializedSuperField @relation(fields: [super_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  home_care_companies HomeCareCompany[]

  @@map("home_care_specialized_sub_fields")
}

model RealEstateSpecializedSuperField {
  id   String @id
  name String @unique

  sub RealEstateSpecializedSubField[]

  @@map("real_estate_specialized_super_fields")
}

model RealEstateSpecializedSubField {
  id       String @id
  name     String @unique
  super_id String

  super              RealEstateSpecializedSuperField @relation(fields: [super_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  real_estate_agents RealEstateAgent[]

  @@map("real_estate_specialized_sub_fields")
}
model BusinessRate {
  id          String @id
  category_id String
  ratee_id    String
  rater_id    String
  rate        Int    @db.SmallInt

  ratee    BusinessUser         @relation(fields: [ratee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rater    Customer             @relation(fields: [rater_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category BusinessRateCategory @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("business_rates")
}

model BusinessRateCategory {
  id   String @id
  name String @unique

  rates BusinessRate[]

  @@map("business_rate_categories")
}

model BusinessReview {
  id          String @id
  reviewee_id String
  reviewer_id String
  review      String

  reviewee BusinessUser @relation(fields: [reviewee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviewer Customer     @relation(fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("business_reviews")
}
model Board {
  id   String @id
  name String @unique

  articles BoardArticle[]

  @@map("boards")
}

model BoardArticle {
  id        String @id
  title     String
  author_id String
  board_id  String

  author   User                  @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  board    Board                 @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contents BoardArticleContent[]
  comments BoardComment[]

  @@map("board_articles")
}

model BoardArticleContent {
  id         String   @id
  text       String
  created_at DateTime @db.Timestamptz
  article_id String

  article BoardArticle @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("board_article_contents")
}

model BoardComment {
  id         String @id
  author_id  String
  article_id String

  author   User                  @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  article  BoardArticle          @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contents BoardCommentContent[]

  @@map("board_comments")
}

model BoardCommentContent {
  id         String   @id
  text       String
  created_at DateTime @db.Timestamptz
  comment_id String

  comment BoardComment @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("board_comment_contents")
}
