datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../db"
}

enum GenderType {
  female
  male
  other
}

enum OauthType {
  kakao
  naver
}

enum ExpertBusinessType {
  HS
  RE
}

enum AgreementUserType {
  all
  customer
  business
  HS
  RE
}

model OauthAccessorModel {
  id                String            @id
  created_at        DateTime          @database.Timestamptz
  updated_at        DateTime          @database.Timestamptz
  is_deleted        Boolean
  deleted_at        DateTime?         @database.Timestamptz
  oauth_type        OauthType
  oauth_sub         String
  business_user_id  String
  customer_id       String
  name              String?
  email             String?
  phone             String?
  profile_image_url String?
  birth             String?
  gender            GenderType?
  address_first     String?
  address_second    String?
  business_user     BusinessUserModel @relation(fields: [business_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer          CustomerModel     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("oauth_accessors")
}

model UserModel {
  id                    String                     @id
  created_at            DateTime                   @database.Timestamptz
  updated_at            DateTime                   @database.Timestamptz
  is_deleted            Boolean
  deleted_at            DateTime?                  @database.Timestamptz
  name                  String
  email                 String?
  customer              CustomerModel?
  business_user         BusinessUserModel?
  agreement_acceptances AgreementAcceptanceModel[]

  @@map("users")
}

model CustomerModel {
  id                String               @id
  birth             String?
  gender            GenderType?
  phone             String?
  address_first     String?
  address_second    String?
  profile_image_url String?
  base              UserModel            @relation(fields: [id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  oauth_accessor    OauthAccessorModel[]

  @@map("customers")
}

model BusinessUserModel {
  id                   String                       @id
  is_verified          Boolean
  introduction_title   String
  introduction_content String
  phone                String
  address_first        String
  address_second       String
  profile_image_url    String
  base                 UserModel                    @relation(fields: [id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  re_agent             REAgentModel?
  hs_provider          HSProviderModel?
  certifications       BusinessCertificationModel[]
  super_expertise      SuperExpertiseModel?
  sub_expertises       SubExpertiseModel[]
  oauth_accessor       OauthAccessorModel[]

  @@map("business_users")
}

model REAgentModel {
  id                     String            @id
  is_licensed            Boolean
  re_num                 String
  re_name                String
  re_phone               String
  re_licensed_agent_name String
  base                   BusinessUserModel @relation(fields: [id], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("re_agents")
}

model HSProviderModel {
  id                        String                     @id
  business_registration_num String
  base                      BusinessUserModel          @relation(fields: [id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  introduction_images       HSIntroductionImageModel[]

  @@map("hs_providers")
}

model BusinessCertificationModel {
  id               String            @id
  created_at       DateTime          @database.Timestamptz
  updated_at       DateTime          @database.Timestamptz
  is_deleted       Boolean
  deleted_at       DateTime?         @database.Timestamptz
  business_user_id String
  image_url        String
  business_user    BusinessUserModel @relation(fields: [business_user_id], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("business_certifications")
}

model HSIntroductionImageModel {
  id             String          @id
  created_at     DateTime        @database.Timestamptz
  updated_at     DateTime        @database.Timestamptz
  is_deleted     Boolean
  deleted_at     DateTime?       @database.Timestamptz
  hs_provider_id String
  image_url      String
  hs_provider    HSProviderModel @relation(fields: [hs_provider_id], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@map("hs_introduction_images")
}

model SuperExpertiseModel {
  created_at        DateTime                 @database.Timestamptz
  updated_at        DateTime                 @database.Timestamptz
  id                String                   @id
  business_user_id  String                   @unique
  super_category_id String
  business_user     BusinessUserModel        @relation(fields: [business_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category          ExpertSuperCategoryModel @relation(fields: [super_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("super_expertises")
}

model SubExpertiseModel {
  id               String                 @id
  created_at       DateTime               @database.Timestamptz
  updated_at       DateTime               @database.Timestamptz
  is_deleted       Boolean
  deleted_at       DateTime?              @database.Timestamptz
  sub_category_id  String
  business_user_id String
  category         ExpertSubCategoryModel @relation(fields: [sub_category_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  business_user    BusinessUserModel      @relation(fields: [business_user_id], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([sub_category_id, business_user_id])
  @@map("sub_expertises")
}

model ExpertSubCategoryModel {
  id         String                   @id
  created_at DateTime                 @database.Timestamptz
  updated_at DateTime                 @database.Timestamptz
  is_deleted Boolean
  deleted_at DateTime?                @database.Timestamptz
  name       String                   @unique
  super_id   String
  super      ExpertSuperCategoryModel @relation(fields: [super_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  expertises SubExpertiseModel[]

  @@map("expert_sub_categories")
}

model ExpertSuperCategoryModel {
  id            String                   @id
  created_at    DateTime                 @database.Timestamptz
  updated_at    DateTime                 @database.Timestamptz
  is_deleted    Boolean
  deleted_at    DateTime?                @database.Timestamptz
  name          String                   @unique
  business_type ExpertBusinessType
  subs          ExpertSubCategoryModel[]
  expertises    SuperExpertiseModel[]

  @@map("expert_super_categories")
}

model AgreementModel {
  id          String                     @id
  created_at  DateTime                   @database.Timestamptz
  updated_at  DateTime                   @database.Timestamptz
  is_deleted  Boolean
  deleted_at  DateTime?                  @database.Timestamptz
  title       String
  content     String
  user_type   AgreementUserType
  acceptances AgreementAcceptanceModel[]

  @@map("agreements")
}

model AgreementAcceptanceModel {
  id           String         @id
  created_at   DateTime       @database.Timestamptz
  updated_at   DateTime       @database.Timestamptz
  is_deleted   Boolean
  deleted_at   DateTime?      @database.Timestamptz
  user_id      String
  agreement_id String
  user         UserModel      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  agreement    AgreementModel @relation(fields: [agreement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, agreement_id])
  @@map("agreement_acceptances")
}
