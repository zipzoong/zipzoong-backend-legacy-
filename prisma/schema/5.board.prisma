model BoardModel {
  id   String @id
  name String @unique

  articles BoardArticleModel[]

  @@map("boards")
}

model BoardArticleModel {
  id        String @id
  title     String
  author_id String
  board_id  String

  author   UserModel                  @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  board    BoardModel                 @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contents BoardArticleContentModel[]
  comments BoardCommentModel[]

  @@map("board_articles")
}

model BoardArticleContentModel {
  id         String   @id
  text       String
  created_at DateTime @db.Timestamptz
  article_id String

  article BoardArticleModel @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("board_article_contents")
}

model BoardCommentModel {
  id         String @id
  author_id  String
  article_id String

  author   UserModel                  @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  article  BoardArticleModel          @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contents BoardCommentContentModel[]

  @@map("board_comments")
}

model BoardCommentContentModel {
  id         String   @id
  text       String
  created_at DateTime @db.Timestamptz
  comment_id String

  comment BoardCommentModel @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("board_comment_contents")
}
