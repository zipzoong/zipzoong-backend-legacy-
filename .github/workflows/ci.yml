name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - main
      - devlop
      - user_system

env:
  PORT: 4000
  DATABASE_URL: postgresql://test:test@localhost:5432/test
  ACCESSOR_TOKEN_PRIVATE_KEY: ${{ vars.ACCESSOR_TOKEN_PRIVATE_KEY }}
  ACCESSOR_TOKEN_PUBLIC_KEY: ${{ vars.ACCESSOR_TOKEN_PUBLIC_KEY }}
  USER_TOKEN_PRIVATE_KEY: ${{ vars.USER_TOKEN_PRIVATE_KEY }}
  USER_TOKEN_PUBLIC_KEY: ${{ vars.USER_TOKEN_PUBLIC_KEY }}

permissions:
  pull-requests: write

jobs:
  Test_Report:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'hotfix/') == true

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd="pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@main

      - name: Install
        run: npm ci

      - name: Setup DB
        run: npm run db:deploy

      - name: Test 🧪
        run: npm run test

      - name: Create or Update PR Comment 💬
        uses: actions/github-script@main
        if: github.event.pull_request
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const cmts = await github.rest.issues.listComments({ issue_number, owner, repo });

            const comment = cmts.data.find(cmt => cmt.user.login === 'github-actions[bot]');

            const fs = require('fs');
            const path = './test_log.md';
            const body = fs.readFileSync(path, 'utf8');
            comment
                ? github.rest.issues.updateComment({ comment_id: comment.id, owner, repo, body })
                : github.rest.issues.createComment({ issue_number, owner, repo, body });
