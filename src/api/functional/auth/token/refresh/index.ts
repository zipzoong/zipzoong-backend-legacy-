/**
 * @packageDocumentation
 * @module api.functional.auth.token.refresh
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IAuthentication } from "./../../../../structures/authentication";

/**
 * @summary token refresh
 * @tag authentication
 * @return access_token
 * @throw 401 Unauthorized
 * @throw 403 Forbidden
 * 
 * @controller TokenRefreshController.execute()
 * @path POST /auth/token/refresh
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function execute(
    connection: IConnection,
): Promise<execute.Output> {
    return !!(connection.simulate ?? (connection as any).random)
        ? execute.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              execute.ENCRYPTED,
              execute.METHOD,
              execute.path(),
          );
}
export namespace execute {
    export type Output = IAuthentication.IAccessToken;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/token/refresh";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/auth/token/refresh`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof (connection.simulate ?? (connection as any).random) === 'object'
            && (connection.simulate ?? (connection as any).random) !== null
                ? (connection.simulate ?? (connection as any).random)
                : undefined
        );
    }
}