/**
 * @packageDocumentation
 * @module api.functional.auth.sign_in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IAuthentication } from "./../../../structures/authentication";

/**
 * 전달된 정보에 대응하는 특정 회원에 대한 권한이 부여된 인증 토큰을 발급한다.
 * 
 * @summary 로그인
 * @tag authentication
 * @param body oauth code, oauth type, user_type
 * @return tokens
 * @throw 401 Unauthorized
 * @throw 403 Forbidden
 * 
 * @controller SignInController.execute()
 * @path POST /auth/sign-in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function execute
    (
        connection: IConnection,
        body: IAuthentication.ISignIn
    ): Promise<execute.Output>
{
    return Fetcher.fetch
    (
        connection,
        execute.ENCRYPTED,
        execute.METHOD,
        execute.path(),
        body,
        execute.stringify
    );
}
export namespace execute
{
    export type Input = IAuthentication.ISignIn;
    export type Output = IAuthentication.IResponse;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/sign-in";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export function path(): string
    {
        return `/auth/sign-in`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * 해당 API는 ajax API 방식으로 호출하면 안되고,
 * document api 형식으로 요청해야 합니다.
 * 
 * @summary oauth login redirect api
 * @tag authentication
 * @param oauth_type
 * @return redirect
 * 
 * @controller SignInController.redirect()
 * @path GET /auth/sign-in/:oauth_type
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function redirect
    (
        connection: IConnection,
        oauth_type: "kakao"
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        redirect.ENCRYPTED,
        redirect.METHOD,
        redirect.path(oauth_type)
    );
}
export namespace redirect
{

    export const METHOD = "GET" as const;
    export const PATH: string = "/auth/sign-in/:oauth_type";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 302,
    };

    export function path(oauth_type: "kakao"): string
    {
        return `/auth/sign-in/${encodeURIComponent(oauth_type ?? "null")}`;
    }
}