/**
 * @packageDocumentation
 * @module api.functional.auth.sign_in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { Authentication } from "./../../../structures/auth/auth.interface";
import type { ITokens } from "./../../../structures/auth/token.interface";

/**
 * 전달된 정보에 대응하는 특정 회원에 대한 권한이 부여된 인증 토큰을 발급한다.
 * 
 * @summary 로그인 API
 * @tag authentication
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body oauth code, oauth type, user_type
 * @returns tokens
 * @throw 401 Unauthorized
 * @throw 404 Not Found
 * 
 * @controller AuthenticationController.signIn()
 * @path POST /auth/sign-in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function signIn
    (
        connection: IConnection,
        body: Authentication.ISignIn
    ): Promise<signIn.Output>
{
    return Fetcher.fetch
    (
        connection,
        signIn.ENCRYPTED,
        signIn.METHOD,
        signIn.path(),
        body,
        signIn.stringify
    );
}
export namespace signIn
{
    export type Input = Authentication.ISignIn;
    export type Output = ITokens;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/sign-in";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export function path(): string
    {
        return `/auth/sign-in`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}