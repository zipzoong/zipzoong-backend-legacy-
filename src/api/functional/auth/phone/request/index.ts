/**
 * @packageDocumentation
 * @module api.functional.auth.phone.request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IPhoneAuthentication } from "./../../../../structures/phone_authentication";

/**
 * 해당 API를 호출시, 전달된 휴대폰 번호로 문자를 전송합니다.
 * 
 * @summary phone authentication request
 * @tag authentication
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body phone authentication input
 * @return authentication expired date-time
 * @throw 401 Unauthorized
 * 
 * @controller PhoneAuthenticationRequestController.execute()
 * @path POST /auth/phone/request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function execute
    (
        connection: IConnection,
        body: IPhoneAuthentication.IRequest.Input
    ): Promise<execute.Output>
{
    return Fetcher.fetch
    (
        connection,
        execute.ENCRYPTED,
        execute.METHOD,
        execute.path(),
        body,
        execute.stringify
    );
}
export namespace execute
{
    export type Input = IPhoneAuthentication.IRequest.Input;
    export type Output = IPhoneAuthentication.IRequest.Output;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/phone/request";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/auth/phone/request`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}