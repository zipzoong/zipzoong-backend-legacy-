/**
 * @packageDocumentation
 * @module api.functional.auth.phone.verify
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { Mutable } from "./../../../../types/mutable.interface";
import type { IPhoneAuthentication } from "./../../../../structures/phone_authentication";

/**
 * phone authentication request를 통해 생성한 정보에 대해 인증을 진행합니다.
 * 
 * 응답 결과에 담긴 식별자는 회원 정보 생성/수정시에 사용되며, 식별되는 휴대폰 번호를 저장합니다.
 * 
 * @summary phone verify
 * @tag authentication
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body phone verify input
 * @return phone_authentication_id
 * 
 * @controller PhoneAuthenticationVerifyController.execute()
 * @path POST /auth/phone/verify
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function execute
    (
        connection: IConnection,
        body: Mutable<IPhoneAuthentication>
    ): Promise<execute.Output>
{
    return Fetcher.fetch
    (
        connection,
        execute.ENCRYPTED,
        execute.METHOD,
        execute.path(),
        body,
        execute.stringify
    );
}
export namespace execute
{
    export type Input = Mutable<IPhoneAuthentication>;
    export type Output = IPhoneAuthentication.IVerify.Output;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/phone/verify";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export function path(): string
    {
        return `/auth/phone/verify`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}