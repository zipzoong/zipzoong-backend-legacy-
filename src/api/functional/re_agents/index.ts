/**
 * @packageDocumentation
 * @module api.functional.re_agents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { IPage, PaginatedResponse } from "./../../structures/common/pagination.interface";
import type { IREAgent } from "./../../structures/user/re_agent";

/**
 * @controller REAgentsController.findMany()
 * @path GET /re-agents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findMany
    (
        connection: IConnection,
        query: IPage
    ): Promise<findMany.Output>
{
    return Fetcher.fetch
    (
        connection,
        findMany.ENCRYPTED,
        findMany.METHOD,
        findMany.path(query)
    );
}
export namespace findMany
{
    export type Query = IPage;
    export type Output = PaginatedResponse<IREAgent>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/re-agents";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(query: IPage): string
    {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/re-agents${encoded.length ? `?${encoded}` : ""}`;;
    }
}