/**
 * @packageDocumentation
 * @module api.functional.re_agents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IREAgent } from "./../../structures/user/re_agent";

/**
 * @summary 공인중개사 생성 API
 * @tag re_agents
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 공인중개사 생성 정보
 * @return 공인중개사 정보
 * 
 * @controller REAgentController.create()
 * @path POST /re-agents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IREAgent.ICreate
    ): Promise<create.Output>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IREAgent.ICreate;
    export type Output = IREAgent;

    export const METHOD = "POST" as const;
    export const PATH: string = "/re-agents";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/re-agents`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * @summary 공인중개사 조회 API
 * @tag re_agents
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param re_agent_id 공인중개사 ID
 * @return 공인중개사 정보
 * @throw 400 Real Estate Agent Not Found
 * @throw 412 Unprocessable Entity
 * 
 * @controller REAgentController.find()
 * @path GET /re-agents/:re_agent_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function find
    (
        connection: IConnection,
        re_agent_id: string
    ): Promise<find.Output>
{
    return Fetcher.fetch
    (
        connection,
        find.ENCRYPTED,
        find.METHOD,
        find.path(re_agent_id)
    );
}
export namespace find
{
    export type Output = IREAgent;

    export const METHOD = "GET" as const;
    export const PATH: string = "/re-agents/:re_agent_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(re_agent_id: string): string
    {
        return `/re-agents/${encodeURIComponent(re_agent_id)}`;
    }
}