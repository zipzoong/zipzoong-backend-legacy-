/**
 * @packageDocumentation
 * @module api.functional.zipzoong_care.request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IZipzoongCareRequest } from "./../../../structures/zipzoong_care";

/**
 * @summary 집중 케어 신청
 * @tag focus-cares
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 집중 케어 신청 정보
 * @throw 401 Unauthorized
 * @throw 403 Forbidden
 * 
 * @controller IZipzoongCareRequestController.execute()
 * @path POST /zipzoong-care/request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function execute
    (
        connection: IConnection,
        body: IZipzoongCareRequest.ICreateRequest
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        execute.ENCRYPTED,
        execute.METHOD,
        execute.path(),
        body,
        execute.stringify
    );
}
export namespace execute
{
    export type Input = IZipzoongCareRequest.ICreateRequest;

    export const METHOD = "POST" as const;
    export const PATH: string = "/zipzoong-care/request";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/zipzoong-care/request`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}