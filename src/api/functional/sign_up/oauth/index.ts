/**
 * @packageDocumentation
 * @module api.functional.sign_up.oauth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IAccessor } from "./../../../structures/user/accessor";

/**
 * Oauth2.0 회원가입 요청
 * 
 * @summary Oauth 회원가입 API
 * @tag oauth
 * @tag authentication
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body oauth 회원가입 요청 정보
 * @returns 응답 데이터 없음
 * 
 * @controller AuthController.createAccessor()
 * @path POST /sign-up/oauth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function createAccessor
    (
        connection: IConnection,
        body: IAccessor.ISignInBody
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        createAccessor.ENCRYPTED,
        createAccessor.METHOD,
        createAccessor.path(),
        body,
        createAccessor.stringify
    );
}
export namespace createAccessor
{
    export type Input = IAccessor.ISignInBody;

    export const METHOD = "POST" as const;
    export const PATH: string = "/sign-up/oauth";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/sign-up/oauth`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}