/**
 * @packageDocumentation
 * @module api.functional.expert_categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { IExpertCategory } from "./../../structures/expert_category/expert-category";

export * as sub_categories from "./sub_categories";

/**
 * @summary 상위 전문 분야 목록 조회 API
 * @tag expert-categories
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param query 상위 전문 분야 필터링 조건
 * @return 상위 전문 분야 목록
 * 
 * @controller ExpertCategoriesController.getSuperCategoryList()
 * @path GET /expert-categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getSuperCategoryList
    (
        connection: IConnection,
        query: IExpertCategory.ISuperSearch
    ): Promise<getSuperCategoryList.Output>
{
    return Fetcher.fetch
    (
        connection,
        getSuperCategoryList.ENCRYPTED,
        getSuperCategoryList.METHOD,
        getSuperCategoryList.path(query)
    );
}
export namespace getSuperCategoryList
{
    export type Query = IExpertCategory.ISuperSearch;
    export type Output = Array<IExpertCategory.Super>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/expert-categories";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(query: IExpertCategory.ISuperSearch): string
    {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/expert-categories${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * @summary 상위 전문 분야 조회 API
 * @tag expert-categories
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param super_id 상위 전문 분야 id
 * @return 상위 전문 분야 정보
 * @throw 404 NotFound
 * 
 * @controller ExpertCategoriesController.getSuperCategory()
 * @path GET /expert-categories/:super_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getSuperCategory
    (
        connection: IConnection,
        super_id: string
    ): Promise<getSuperCategory.Output>
{
    return Fetcher.fetch
    (
        connection,
        getSuperCategory.ENCRYPTED,
        getSuperCategory.METHOD,
        getSuperCategory.path(super_id)
    );
}
export namespace getSuperCategory
{
    export type Output = IExpertCategory.Super;

    export const METHOD = "GET" as const;
    export const PATH: string = "/expert-categories/:super_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(super_id: string): string
    {
        return `/expert-categories/${encodeURIComponent(super_id ?? "null")}`;
    }
}