/**
 * @packageDocumentation
 * @module api.functional.customers
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { ICustomer } from "./../../structures/user/customer";

/**
 * @summary 일반 고객 생성 API
 * @tag customers
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 일반 고객 생성 정보
 * @return 일반 고객 정보
 * 
 * @controller CustomerController.create()
 * @path POST /customers
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: ICustomer.ICreate
    ): Promise<create.Output>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = ICustomer.ICreate;
    export type Output = ICustomer;

    export const METHOD = "POST" as const;
    export const PATH: string = "/customers";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/customers`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * @summary 일반 고객 조회 API
 * @tag customers
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param customer_id 일반 고객 ID
 * @return 일반 고객 정보
 * 
 * @controller CustomerController.find()
 * @path GET /customers/:customer_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function find
    (
        connection: IConnection,
        customer_id: string
    ): Promise<find.Output>
{
    return Fetcher.fetch
    (
        connection,
        find.ENCRYPTED,
        find.METHOD,
        find.path(customer_id)
    );
}
export namespace find
{
    export type Output = ICustomer;

    export const METHOD = "GET" as const;
    export const PATH: string = "/customers/:customer_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(customer_id: string): string
    {
        return `/customers/${encodeURIComponent(customer_id)}`;
    }
}