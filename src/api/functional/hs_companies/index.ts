/**
 * @packageDocumentation
 * @module api.functional.hs_companies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IHSCompany } from "./../../structures/user/hs_company";

/**
 * @summary 생활서비스 회사 생성 API
 * @tag hs_companies
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 생활서비스 회사 생성 정보
 * @return 생활서비스 회사 정보
 * 
 * @controller HSCompanyController.create()
 * @path POST /hs-companies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IHSCompany.ICreate
    ): Promise<create.Output>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IHSCompany.ICreate;
    export type Output = IHSCompany;

    export const METHOD = "POST" as const;
    export const PATH: string = "/hs-companies";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/hs-companies`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}

/**
 * @summary 생활서비스 회사 조회 API
 * @tag hs_companies
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param hs_company_id 생활서비스 회사 ID
 * @return 생활서비스 회사 정보
 * @throw 400 Home Service Company Not Found
 * @throw 422 Unprocessable Entity
 * 
 * @controller HSCompanyController.find()
 * @path GET /hs-companies/:hs_company_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function find
    (
        connection: IConnection,
        hs_company_id: string
    ): Promise<find.Output>
{
    return Fetcher.fetch
    (
        connection,
        find.ENCRYPTED,
        find.METHOD,
        find.path(hs_company_id)
    );
}
export namespace find
{
    export type Output = IHSCompany;

    export const METHOD = "GET" as const;
    export const PATH: string = "/hs-companies/:hs_company_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(hs_company_id: string): string
    {
        return `/hs-companies/${encodeURIComponent(hs_company_id)}`;
    }
}