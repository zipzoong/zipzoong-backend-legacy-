/**
 * @packageDocumentation
 * @module api.functional.verification.phones.verify
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { Mutable } from "./../../../../types/mutable.interface";
import type { IPhoneVerification } from "./../../../../structures/verification/phone";

/**
 * `POST /verification/phones`를 통해 생성된 인증 정보를 인증하는 API
 * 
 * 인증 정보 생성 5분 이내에 실행되어야 한다.
 * 
 * @summary phone verification verify
 * @tag verification
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body phone verification verify input
 * @return phone_verification_id
 * @throw 401 Unauthorized
 * @throw 403 Forbidden
 * 
 * @controller VerificationPhonesVerifyController.execute()
 * @path POST /verification/phones/verify
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function execute
    (
        connection: IConnection,
        body: Mutable<IPhoneVerification>
    ): Promise<execute.Output>
{
    return Fetcher.fetch
    (
        connection,
        execute.ENCRYPTED,
        execute.METHOD,
        execute.path(),
        body,
        execute.stringify
    );
}
export namespace execute
{
    export type Input = Mutable<IPhoneVerification>;
    export type Output = IPhoneVerification.IVerifyResponse;

    export const METHOD = "POST" as const;
    export const PATH: string = "/verification/phones/verify";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export function path(): string
    {
        return `/verification/phones/verify`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}