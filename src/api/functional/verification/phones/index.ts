/**
 * @packageDocumentation
 * @module api.functional.verification.phones
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IPhoneVerification } from "./../../../structures/verification/phone";

export * as verify from "./verify";

/**
 * 해당 API를 호출시, 전달된 휴대폰 번호로 문자를 전송합니다.
 * 
 * @summary phone verification create
 * @tag verification
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body phone verification create input
 * @return verification expired date-time
 * @throw 401 Unauthorized
 * 
 * @controller VerificationPhonesController.create()
 * @path POST /verification/phones
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IPhoneVerification.ICreateRequest
    ): Promise<create.Output>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IPhoneVerification.ICreateRequest;
    export type Output = IPhoneVerification.ICreateResponse;

    export const METHOD = "POST" as const;
    export const PATH: string = "/verification/phones";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/verification/phones`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}