/**
 * @packageDocumentation
 * @module api.functional.reviews
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IReview } from "./../../structures/review";

/**
 * 사업자를 기준으로 리뷰를 검색하거나 리뷰어를 기준으로 검색할 수 있습니다.
 * 
 * @summary 리뷰 목록 검색
 * @tag reviews
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param query 리뷰어 혹은 리뷰 대상자를 조건으로 지정 가능
 * @returns 리뷰 목록
 * 
 * @controller ReviewsController.getList()
 * @path GET /reviews
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getList
    (
        connection: IConnection,
        query: IReview.ISearch
    ): Promise<getList.Output>
{
    return Fetcher.fetch
    (
        connection,
        getList.ENCRYPTED,
        getList.METHOD,
        getList.path(query)
    );
}
export namespace getList
{
    export type Query = IReview.ISearch;
    export type Output = IReview.IPaginatedResponse;

    export const METHOD = "GET" as const;
    export const PATH: string = "/reviews";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(query: IReview.ISearch): string
    {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/reviews${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * @summary 리뷰 등록
 * @tag reviews
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 리뷰 내용과 평점 리스트를 포함
 * @throw 401 Unauthorized
 * @throw 403 Forbidden
 * @throw 404 Not Found
 * 
 * @controller ReviewsController.create()
 * @path POST /reviews
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IReview.ICreateRequest
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IReview.ICreateRequest;

    export const METHOD = "POST" as const;
    export const PATH: string = "/reviews";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/reviews`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}