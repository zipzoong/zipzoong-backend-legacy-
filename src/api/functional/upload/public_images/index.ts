/**
 * @packageDocumentation
 * @module api.functional.upload.public_images
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { IUpload } from "./../../../structures/upload";

/**
 * 공개 리소스를 업로드하기 위한 presigned url을 얻기 위한 요청
 * 
 * @param resource_type public resource type
 * @return url and presigned url
 * @throws 500 Internal Server Error
 * 
 * @controller PublicUploadController.getUrls()
 * @path GET /upload/public-images/:resource_type
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUrls(
    connection: IConnection,
    resource_type: IUpload.PublicImageType,
): Promise<getUrls.Output> {
    return !!connection.simulate
        ? getUrls.simulate(
              connection,
              resource_type,
          )
        : Fetcher.fetch(
              connection,
              getUrls.ENCRYPTED,
              getUrls.METHOD,
              getUrls.path(resource_type),
          );
}
export namespace getUrls {
    export type Output = IUpload;

    export const METHOD = "GET" as const;
    export const PATH: string = "/upload/public-images/:resource_type";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (resource_type: IUpload.PublicImageType): string => {
        return `/upload/public-images/${encodeURIComponent(resource_type ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        resource_type: IUpload.PublicImageType,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(resource_type)
        });
        assert.param("resource_type")("string")(() => typia.assert(resource_type));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}