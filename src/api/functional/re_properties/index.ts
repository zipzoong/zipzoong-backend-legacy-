/**
 * @packageDocumentation
 * @module api.functional.re_properties
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../utils/NestiaSimulator";
import type { IREProperty } from "./../../structures/re_property";

/**
 * @summary 부동산 매물 목록 검색
 * @tag re-properties
 * @param query 부동산 매물 필터링 조건
 * @return 부동산 매물 목록
 * 
 * @controller REPropertiesController.getList()
 * @path GET /re-properties
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getList(
    connection: IConnection,
    query: IREProperty.ISearch,
): Promise<getList.Output> {
    return !!(connection.simulate ?? (connection as any).random)
        ? getList.simulate(
              connection,
              query,
          )
        : Fetcher.fetch(
              connection,
              getList.ENCRYPTED,
              getList.METHOD,
              getList.path(query),
          );
}
export namespace getList {
    export type Query = IREProperty.ISearch;
    export type Output = IREProperty.IPaginatedResponse;

    export const METHOD = "GET" as const;
    export const PATH: string = "/re-properties";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (query: getList.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/re-properties${encoded.length ? `?${encoded}` : ""}`;;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        query: getList.Query,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(query)
        });
        assert.query(() => typia.assert(query));
        return random(
            typeof (connection.simulate ?? (connection as any).random) === 'object'
            && (connection.simulate ?? (connection as any).random) !== null
                ? (connection.simulate ?? (connection as any).random)
                : undefined
        );
    }
}

/**
 * @summary 부동산 매물 복수 등록
 * @tag re-properties
 * @param query 부동산 매물 필터링 조건
 * @return 부동산 매물 목록
 * @throw 401 Unauthorized
 * @throw 403 Forbidden
 * 
 * @controller REPropertiesController.createMany()
 * @path POST /re-properties
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createMany(
    connection: IConnection,
    body: IREProperty.ICreateManyRequest,
): Promise<void> {
    return !!(connection.simulate ?? (connection as any).random)
        ? createMany.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              createMany.ENCRYPTED,
              createMany.METHOD,
              createMany.path(),
              body,
              createMany.stringify,
          );
}
export namespace createMany {
    export type Input = IREProperty.ICreateManyRequest;

    export const METHOD = "POST" as const;
    export const PATH: string = "/re-properties";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/re-properties`;
    }
    export const simulate = async (
        connection: IConnection,
        body: createMany.Input,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}