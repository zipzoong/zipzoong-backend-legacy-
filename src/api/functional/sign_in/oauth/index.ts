/**
 * @packageDocumentation
 * @module api.functional.sign_in.oauth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IAccessor } from "./../../../structures/user/accessor";

/**
 * oauth 로그인 API
 * 
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body oauth code & oauth type
 * @returns 사용자 인증 정보
 * 
 * @controller AccessorController.signIn()
 * @path POST /sign-in/oauth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function signIn
    (
        connection: IConnection,
        body: IAccessor.IOauthSignIn
    ): Promise<signIn.Output>
{
    return Fetcher.fetch
    (
        connection,
        signIn.ENCRYPTED,
        signIn.METHOD,
        signIn.path(),
        body,
        signIn.stringify
    );
}
export namespace signIn
{
    export type Input = IAccessor.IOauthSignIn;
    export type Output = IAccessor;

    export const METHOD = "POST" as const;
    export const PATH: string = "/sign-in/oauth";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/sign-in/oauth`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}