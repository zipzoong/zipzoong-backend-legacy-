/**
 * @packageDocumentation
 * @module api.functional.re_property_middle_categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { IREPropertyCategory } from "./../../structures/real_estate/re_property_category";
import type { IPaginatedResponse } from "./../../structures/common/pagination";

/**
 * @summary 부동산 매물 중간 카테고리 목록 조회
 * @tag re-property-categories
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param query 부동산 매물 중간 카테고리 필터링 조건
 * @return 부동산 매물 중간 카테고리 목록
 * 
 * @controller REPropertyMiddleCategoriesController.getList()
 * @path GET /re-property-middle-categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getList
    (
        connection: IConnection,
        query: IREPropertyCategory.IMiddle.ISearch
    ): Promise<getList.Output>
{
    return Fetcher.fetch
    (
        connection,
        getList.ENCRYPTED,
        getList.METHOD,
        getList.path(query)
    );
}
export namespace getList
{
    export type Query = IREPropertyCategory.IMiddle.ISearch;
    export type Output = IPaginatedResponse<IREPropertyCategory.IMiddle>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/re-property-middle-categories";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(query: IREPropertyCategory.IMiddle.ISearch): string
    {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/re-property-middle-categories${encoded.length ? `?${encoded}` : ""}`;;
    }
}

/**
 * @summary 부동산 매물 중간 카테고리 조회
 * @tag re-property-categories
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param middle_category_id 부동산 매물 중간 카테고리 id
 * @return 부동산 매물 중간 카테고리
 * @throw 404 Not Found
 * 
 * @controller REPropertyMiddleCategoriesController.getOne()
 * @path GET /re-property-middle-categories/:middle_category_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getOne
    (
        connection: IConnection,
        middle_category_id: string
    ): Promise<getOne.Output>
{
    return Fetcher.fetch
    (
        connection,
        getOne.ENCRYPTED,
        getOne.METHOD,
        getOne.path(middle_category_id)
    );
}
export namespace getOne
{
    export type Output = IREPropertyCategory.IMiddle;

    export const METHOD = "GET" as const;
    export const PATH: string = "/re-property-middle-categories/:middle_category_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(middle_category_id: string): string
    {
        return `/re-property-middle-categories/${encodeURIComponent(middle_category_id ?? "null")}`;
    }
}