/**
 * @packageDocumentation
 * @module api.functional.service_categories.super
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { IServiceCategory } from "./../../../structures/category/service";

/**
 * @summary 서비스 상위 카테고리 목록 검색
 * @tag services
 * @tag categories
 * @param query 서비스 상위 카테고리 목록 검색 조건
 * @return 서비스 상위 카테고리 목록
 * 
 * @controller ServiceCategoriesController.getList()
 * @path GET /service-categories/super
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getList(
    connection: IConnection,
    query: IServiceCategory.ISearch,
): Promise<getList.Output> {
    return !!(connection.simulate ?? (connection as any).random)
        ? getList.simulate(
              connection,
              query,
          )
        : Fetcher.fetch(
              connection,
              getList.ENCRYPTED,
              getList.METHOD,
              getList.path(query),
          );
}
export namespace getList {
    export type Query = IServiceCategory.ISearch;
    export type Output = Array<IServiceCategory.ISuper>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/service-categories/super";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (query: getList.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/service-categories/super${encoded.length ? `?${encoded}` : ""}`;;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        query: getList.Query,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(query)
        });
        assert.query(() => typia.assert(query));
        return random(
            typeof (connection.simulate ?? (connection as any).random) === 'object'
            && (connection.simulate ?? (connection as any).random) !== null
                ? (connection.simulate ?? (connection as any).random)
                : undefined
        );
    }
}

/**
 * @summary 서비스 상위 카테고리 조회
 * @tag services
 * @tag categories
 * @param category_id 서비스 상위 카테고리 id
 * @return 서비스 상위 카테고리 정보
 * @throw 404 Not Found
 * 
 * @controller ServiceCategoriesController.getOne()
 * @path GET /service-categories/super/:super_category_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getOne(
    connection: IConnection,
    super_category_id: string,
): Promise<getOne.Output> {
    return !!(connection.simulate ?? (connection as any).random)
        ? getOne.simulate(
              connection,
              super_category_id,
          )
        : Fetcher.fetch(
              connection,
              getOne.ENCRYPTED,
              getOne.METHOD,
              getOne.path(super_category_id),
          );
}
export namespace getOne {
    export type Output = IServiceCategory.ISuper;

    export const METHOD = "GET" as const;
    export const PATH: string = "/service-categories/super/:super_category_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (super_category_id: string): string => {
        return `/service-categories/super/${encodeURIComponent(super_category_id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        super_category_id: string,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(super_category_id)
        });
        assert.param("super_category_id")("string")(() => typia.assert(super_category_id));
        return random(
            typeof (connection.simulate ?? (connection as any).random) === 'object'
            && (connection.simulate ?? (connection as any).random) !== null
                ? (connection.simulate ?? (connection as any).random)
                : undefined
        );
    }
}