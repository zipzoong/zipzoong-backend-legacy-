/**
 * @packageDocumentation
 * @module api.functional.business_rates
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IBusinessRatesStats } from "./../../structures/business_rates_stats";

export * as stats from "./stats";

/**
 * 별점 데이터를 생성하는 API로서 별점을 등록한다는 기능적인 의미를 담고 있다.
 * 
 * customer 권한을 요구한다.
 * 
 * @summary 별점 등록
 * @tag customers
 * @tag business_rates
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 별점 등록 정보
 * @throw Unauthorized
 * @throw Forbidden
 * @throw Not Found
 * 
 * @controller BusinessRatesController.create()
 * @path POST /business-rates
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create
    (
        connection: IConnection,
        body: IBusinessRatesStats.IRate.ICreate
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        create.ENCRYPTED,
        create.METHOD,
        create.path(),
        body,
        create.stringify
    );
}
export namespace create
{
    export type Input = IBusinessRatesStats.IRate.ICreate;

    export const METHOD = "POST" as const;
    export const PATH: string = "/business-rates";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/business-rates`;
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}